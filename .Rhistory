foreach(i=1:3) %dopar% test(i) <- sqrt(i)
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
foreach(i=1:3) %dopar% sqrt(i)
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
foreach(i=1:30000) %dopar% sqrt(i)
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
ptm <- proc.time()
foreach(i=1:3) %dopar% sqrt(i)
proc.time() - ptm
proc.time() - ptm
proc.time() - ptm
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
ptm <- proc.time()
foreach(i=1:30000) %dopar% sqrt(i)
proc.time() - ptm
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
ptm <- proc.time()
foreach(i=1:30000) %do% sqrt(i)
proc.time() - ptm
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
ptm <- proc.time()
foreach(i=1:30000) %do% invisible(sqrt(i))
proc.time() - ptm
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
ptm <- proc.time()
foreach(i=1:30000) %dopar% invisible(sqrt(i))
proc.time() - ptm
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
ptm <- proc.time()
foreach(i=1:300000) %dopar% invisible(sqrt(i))
proc.time() - ptm
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
ptm <- proc.time()
foreach(i=1:300000) %do% invisible(sqrt(i))
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
+ r <- foreach(icount(trials), .combine=cbind) %dopar% {
+ ind <- sample(100, 100, replace=TRUE)
+ result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
+ coefficients(result1)
+ }
+ })[3]
ptime
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
+ r <- foreach(icount(trials), .combine=cbind) %dopar% {
+ ind <- sample(100, 100, replace=TRUE)
+ result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
+ coefficients(result1)
+ }
+ })[3]
ptime
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cl)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
library(doParallel)
cl <- makeCluster(8)
registerDoParallel(cl)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
getDoParWorkers()
SQLusername <- "konur"
SQLpassword <- "ihg345%,;6kK"
SQLhost     <- "rezervin-master.malliq-api.com"
malliq = dbConnect(MySQL(), user = SQLusername, password = SQLpassword, dbname='malliq', host="rezervin-master.malliq-api.com")
malliq_persistent = dbConnect(MySQL(), user = SQLusername, password = SQLpassword, dbname='malliq_persistent', host="rezervin-master.malliq-api.com")
session <- dbSendQuery(malliq, "SELECT * FROM malliq.session S WHERE S.timestamp > '2016-12-16 14:00:00'") #Rezervin launch = 16 dec 2016 14:00
session <- fetch(session, n = -1)
library(RMySQL)
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(date)
library(grid)
library(gridExtra)
library(RColorBrewer)
library(ggmap)
library(geosphere)
library(gplots)
library(reshape2)
library(stringr)
library(leaderCluster)
SQLusername <- "konur"
SQLpassword <- "ihg345%,;6kK"
SQLhost     <- "rezervin-master.malliq-api.com"
###############################################################
#Load Session Data
###############################################################
if(exists("session") == FALSE){
print("...Downloading Session Table...")
malliq = dbConnect(MySQL(), user = SQLusername, password = SQLpassword, dbname='malliq', host="rezervin-master.malliq-api.com")
malliq_persistent = dbConnect(MySQL(), user = SQLusername, password = SQLpassword, dbname='malliq_persistent', host="rezervin-master.malliq-api.com")
session <- dbSendQuery(malliq, "SELECT * FROM malliq.session S WHERE S.timestamp > '2016-12-16 14:00:00'") #Rezervin launch = 16 dec 2016 14:00
session <- fetch(session, n = -1)
print("...Session Table (session): Loaded...")
}else
print("...Session Table (session): Already Exists and Not Loaded Again...")
View(session)
session$mobileIDType <- "Non-Zero"
session$mobileIDType[substr(session$mobile_id, 1, 8)=="01.7.22" | substr(session$mobile_id, 1, 8)=="01.8.0" | substr(session$mobile_id, 1, 8)=="01.8.1"] <- "Zero"
#session$mobileIDType[substr(session$mobile_id, 1, 8)!="00000000"] <- "Non-Zero"
macToggles <- session %>%
group_by(mac, mobileIDType) %>%
summarize(macToggleCount = n())
View(macToggles)
write.csv(macToggles, "mobileIDToggles.csv")
write.csv(macToggles, "mobileIDToggles.csv")
test<- filter(session, mac=="00:34:da:0b:cf:6f")
View(test)
test<- filter(session, mac=="00:09:df:91:69:e7")
library(RMySQL)
library(ggplot2)
library(tidyr)
library(dplyr)
library(data.table)
library(date)
library(grid)
library(gridExtra)
library(RColorBrewer)
library(ggmap)
library(geosphere)
library(gplots)
library(reshape2)
library(stringr)
library(leaderCluster)
#Enable 4 thread parallel foreach execution
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
#Set Directories
setwd("C:/Users/Konuralp/Dropbox/MallIQ/Code/R_Projects/Rezervin/RezervinReport/")
scriptsDirectory <- "C:/Users/Konuralp/Dropbox/MallIQ/Code/R_Projects/Rezervin/RezervinReport/scripts/"
reportsDirectory <- "C:/Users/Konuralp/Dropbox/MallIQ/Code/R_Projects/Rezervin/RezervinReport/reports/"
#Set Report Type
rezervinOnly <- FALSE #TRUE if report is generated for Rezervin / FALSE if for Mall IQ
ptm <- proc.time()
###############################################################
#Load Functions
###############################################################
source(paste0(scriptsDirectory, "addSessions.R"), chdir=TRUE)
source(paste0(scriptsDirectory, "findHomeAndWork.R"), chdir=TRUE)
source(paste0(scriptsDirectory, "restaurant2mall.R"), chdir=TRUE)
source(paste0(scriptsDirectory, "overallStats.R"), chdir=TRUE)
source(paste0(scriptsDirectory, "deviceStats.R"), chdir=TRUE)
source(paste0(scriptsDirectory, "installStats.R"), chdir=TRUE)
source(paste0(scriptsDirectory, "operationalStats.R"), chdir=TRUE)
source(paste0(scriptsDirectory, "nearbyVisitIndoorStats.R"), chdir=TRUE)
source(paste0(scriptsDirectory, "shopStats.R"), chdir=TRUE)
source(paste0(scriptsDirectory, "displayOnMap.R"), chdir=TRUE)
###############################################################
#Load Parameters
###############################################################
#remove scientific notation & stop if there is an error
options(scipen=999); options(error=stop);
#ggplot text sizes & max table length for table display
plot_size <- 16; axis_title_size <- 15; text_size <- 7; text_angle <- 60; textplot_size <- 1.5; tableLength <- 40;
#Max mallid (not included)
max_mallid <- 100; min_restaurant <- 1000; max_restaurant <- 2000;
#wifi-Enabled Malls
activeMalls <- c(26, 27, 54, 53, 72, 88, 28)
###############################################################
#Download & PreProcess Data
###############################################################
source(paste0(scriptsDirectory, "loadSQLData.R"), chdir=TRUE)
source(paste0(scriptsDirectory, "preProcessing.R"), chdir=TRUE)
#Backup Downloaded Files
#locReqShopBACKUP <- locReqShop; mallListBACKUP <- mallList; mallReqBACKUP <- mallReq; sessionBACKUP <- session;
#Restore Files
#locReqShop <- locReqShopBACKUP; mallList <- mallListBACKUP; mallReq <- mallReqBACKUP; session <- sessionBACKUP;
#Get work and home locations for users
allUserHomeWork <- findHomeAndWork(mallReq, 7)
#write.csv(allUserHomeWork, "userHomeAndWorkLocations.csv")
#Replace some restaurants w/ malls
mallReq <- restaurant2mall(mallReq)
###############################################################
#Generate PDF Report
###############################################################
#Start Recording PDF
pdf(paste0(reportsDirectory, "rezervinReport_", Sys.Date(), '.pdf'), width=24, height=13.5)
#Overall Stats
overallStats(session, mallReq, locReqShop, rezervinOnly)
#Install Stats
installStats(session, rezervinOnly)
#Device Stats
deviceStats(session, rezervinOnly)
#Mall & Location Request Table Stats
operationalStats(mallReq, locReqShop, allUserHomeWork, tableLength, rezervinOnly)
#Nearby, Visit & Indoor Stats
nearbyVisitIndoorStats(mallReq, locReqShop, mallList, allUserHomeWork, max_mallid, min_restaurant, max_restaurant, activeMalls, rezervinOnly)
#Shop Stats
shopStats(locReqShop, mallList, shopList, allUserHomeWork, activeMalls, tableLength, rezervinOnly)
dev.off()
proc.time() - ptm
textplot("SHOP STATS", col="#D95F02")
indoorColor <- "forestgreen"
#Indoor Visit Minimum Length
minShopVisitMins <- 1
###############################################################
#PreProcessing
###############################################################
#Get Shop Visits & Sessions
shopReq <- locReqShop %>%
filter(is.na(shop_id) == FALSE, is.na(mall_id) == FALSE, is.na(floor_id) == FALSE)
shopReq <- addSessions(shopReq, 60, "shop")
#Correct and Match Shop IDs
shopReq$shop_id_old <- shopReq$shop_id
for(i in 1:nrow(shopReq)){
charLength <- nchar(shopReq$shop_id[i])
if(charLength == 1)
shopReq$shop_id[i] <- paste0("00", shopReq$shop_id[i])
else if(charLength == 2)
shopReq$shop_id[i] <- paste0("0", shopReq$shop_id[i])
else if(charLength > 3)
print("...Error! Shop ID Longer than 3 digits!...")
}
shopReq$shop_id <- paste0(shopReq$mall_id, shopReq$floor_id, shopReq$shop_id)
shopReq <- merge(x=shopReq, y=shopList[,c("shop_id", "name")], by="shop_id", all.x=T)
#Get Session Stats
sessionTypesShop <- shopReq %>%
group_by(sessionNo, session_id) %>%
summarize(sessionLength = as.numeric(difftime(strptime(max(timestamp), "%Y-%m-%d %H:%M:%S"), strptime(min(timestamp), "%Y-%m-%d %H:%M:%S"), units="mins")),
sessionBeginTime = min(timestamp), sessionEndTime = max(timestamp))
sessionTypesShop$beginHour <- as.numeric(substr(sessionTypesShop$sessionBeginTime, start = 12, stop = 13))
sessionTypesShop$endHour <- as.numeric(substr(sessionTypesShop$sessionEndTime, start = 12, stop = 13))
shopReq <- merge(x=shopReq, y=sessionTypesShop, by=c("sessionNo", "session_id"), all.x=TRUE)
###############################################################
#Top 10/20 Shops Stats
###############################################################
shopVisits <- shopReq %>%
filter(sessionLength>=minShopVisitMins) %>%
group_by(name) %>%
summarize(uniqueUserCount = n_distinct(session_id))
shopVisits2 <- shopReq %>%
filter(sessionLength>=minShopVisitMins) %>%
group_by(sessionNo, name) %>%
summarize(avgDuration = mean(sessionLength))
shopVisits2 <- shopVisits2 %>%
group_by(name)%>%
summarize(numVisits = n(), avgDuration=round(mean(avgDuration)))
shopVisits <- merge(shopVisits, shopVisits2, by="name")
shopVisits <- shopVisits %>% arrange(desc(uniqueUserCount))
shopVisits$visitPerPerson <- round(shopVisits$numVisits / shopVisits$uniqueUserCount, digits=1)
top10shops <- shopVisits$name[1:10]
ptopShops <- ggplot(data=shopVisits[1:10,], aes(x=reorder(name, desc(uniqueUserCount)),y=uniqueUserCount), fill='') +
ggtitle(paste0("Top 10 Shops Visited")) + ylab('# Unique Users') + xlab('') +
geom_bar(stat="identity", aes(fill=''), width=0.5 ) + scale_fill_manual(values=indoorColor) +
geom_text(aes(y=uniqueUserCount/2, label = paste0(uniqueUserCount, "\n(", avgDuration, " mins/visit)" )), size=text_size-4) +
theme(axis.text=element_text(size=10), axis.title=element_text(size=axis_title_size,face="bold"), plot.title=element_text(size=plot_size, face="bold", color=indoorColor)) +
theme(axis.text.x = element_text(size=10,angle=30)) + theme(legend.position="none")
print(ptopShops)
pshopScatter <- ggplot(data=shopVisits[1:20,], aes(x = numVisits, y = avgDuration)) +
ggtitle("Top 20 Shop Statistics: Avg. Duration VS. # of Visits") + ylab('Avg. Visit Duration (mins)') + xlab('# of Visits') +
geom_point(aes(color=''), size=5) + scale_color_brewer(palette="Set1") + geom_text(aes(y=avgDuration+1, label = paste0(name), size=text_size-1)) +
theme(axis.text=element_text(size=12), axis.title=element_text(size=axis_title_size,face="bold"), plot.title=element_text(size=plot_size, face="bold"))
print(pshopScatter)
textplot("Top 30 Shops")
grid.newpage()
grid.table(shopVisits[1:30,])
###############################################################
#Weekly View
###############################################################
top10ShopDisplay <- shopReq %>%
filter(sessionLength>=minShopVisitMins & name %in% top10shops) %>%
group_by(name, hour, day_name) %>%
summarize(uniqueSessionID = n_distinct(session_id), mallReqCount = n())
top10ShopDisplay <- merge(top10ShopDisplay, mallList[,c("mall_id", "name")], by="mall_id")
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Monday"] <- 1
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Tuesday"] <- 2
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Wednesday"] <- 3
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Thursday"] <- 4
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Friday"] <- 5
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Saturday"] <- 6
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Sunday"] <- 7
top10ShopDisplay$day_hour <- paste0(top10ShopDisplay$day_name, "_", top10ShopDisplay$hour)
p10ShopW <- ggplot(data=top10ShopDisplay, aes(x=reorder(day_hour, day_code),y=uniqueSessionID), fill=day_name) +
ggtitle(paste0("Top 10 Brand Visits: Weekly View")) + ylab('# Unique Users') + xlab('day_hour') +
geom_bar(stat="identity", aes(fill=day_name), width=0.5 ) + scale_fill_brewer(palette="Set3") +
geom_text(aes(y=uniqueSessionID, label = uniqueSessionID), size=text_size-4) +
theme(axis.text=element_text(size=10), axis.title=element_text(size=axis_title_size,face="bold"), plot.title=element_text(size=plot_size, face="bold")) +
theme(axis.text.x = element_text(size=10,angle=90)) + facet_grid(name ~ .)
print(p10ShopW)
top10ShopDisplay <- shopReq %>%
filter(sessionLength>=minShopVisitMins & name %in% top10shops) %>%
group_by(name, hour, day_name) %>%
summarize(uniqueSessionID = n_distinct(session_id), mallReqCount = n())
top10ShopDisplay$day_code <- 0
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Monday"] <- 1
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Tuesday"] <- 2
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Wednesday"] <- 3
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Thursday"] <- 4
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Friday"] <- 5
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Saturday"] <- 6
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Sunday"] <- 7
top10ShopDisplay$day_hour <- paste0(top10ShopDisplay$day_name, "_", top10ShopDisplay$hour)
p10ShopW <- ggplot(data=top10ShopDisplay, aes(x=reorder(day_hour, day_code),y=uniqueSessionID), fill=day_name) +
ggtitle(paste0("Top 10 Brand Visits: Weekly View")) + ylab('# Unique Users') + xlab('day_hour') +
geom_bar(stat="identity", aes(fill=day_name), width=0.5 ) + scale_fill_brewer(palette="Set3") +
geom_text(aes(y=uniqueSessionID, label = uniqueSessionID), size=text_size-4) +
theme(axis.text=element_text(size=10), axis.title=element_text(size=axis_title_size,face="bold"), plot.title=element_text(size=plot_size, face="bold")) +
theme(axis.text.x = element_text(size=10,angle=90)) + facet_grid(name ~ .)
print(p10ShopW)
textplot("SHOP STATS", col="#D95F02")
indoorColor <- "forestgreen"
#Indoor Visit Minimum Length
minShopVisitMins <- 1
###############################################################
#PreProcessing
###############################################################
#Get Shop Visits & Sessions
shopReq <- locReqShop %>%
filter(is.na(shop_id) == FALSE, is.na(mall_id) == FALSE, is.na(floor_id) == FALSE)
shopReq <- addSessions(shopReq, 60, "shop")
#Correct and Match Shop IDs
shopReq$shop_id_old <- shopReq$shop_id
for(i in 1:nrow(shopReq)){
charLength <- nchar(shopReq$shop_id[i])
if(charLength == 1)
shopReq$shop_id[i] <- paste0("00", shopReq$shop_id[i])
else if(charLength == 2)
shopReq$shop_id[i] <- paste0("0", shopReq$shop_id[i])
else if(charLength > 3)
print("...Error! Shop ID Longer than 3 digits!...")
}
shopReq$shop_id <- paste0(shopReq$mall_id, shopReq$floor_id, shopReq$shop_id)
shopReq <- merge(x=shopReq, y=shopList[,c("shop_id", "name")], by="shop_id", all.x=T)
#Get Session Stats
sessionTypesShop <- shopReq %>%
group_by(sessionNo, session_id) %>%
summarize(sessionLength = as.numeric(difftime(strptime(max(timestamp), "%Y-%m-%d %H:%M:%S"), strptime(min(timestamp), "%Y-%m-%d %H:%M:%S"), units="mins")),
sessionBeginTime = min(timestamp), sessionEndTime = max(timestamp))
sessionTypesShop$beginHour <- as.numeric(substr(sessionTypesShop$sessionBeginTime, start = 12, stop = 13))
sessionTypesShop$endHour <- as.numeric(substr(sessionTypesShop$sessionEndTime, start = 12, stop = 13))
shopReq <- merge(x=shopReq, y=sessionTypesShop, by=c("sessionNo", "session_id"), all.x=TRUE)
###############################################################
#Top 10/20 Shops Stats
###############################################################
shopVisits <- shopReq %>%
filter(sessionLength>=minShopVisitMins) %>%
group_by(name) %>%
summarize(uniqueUserCount = n_distinct(session_id))
shopVisits2 <- shopReq %>%
filter(sessionLength>=minShopVisitMins) %>%
group_by(sessionNo, name) %>%
summarize(avgDuration = mean(sessionLength))
shopVisits2 <- shopVisits2 %>%
group_by(name)%>%
summarize(numVisits = n(), avgDuration=round(mean(avgDuration)))
shopVisits <- merge(shopVisits, shopVisits2, by="name")
shopVisits <- shopVisits %>% arrange(desc(uniqueUserCount))
shopVisits$visitPerPerson <- round(shopVisits$numVisits / shopVisits$uniqueUserCount, digits=1)
top10shops <- shopVisits$name[1:10]
ptopShops <- ggplot(data=shopVisits[1:10,], aes(x=reorder(name, desc(uniqueUserCount)),y=uniqueUserCount), fill='') +
ggtitle(paste0("Top 10 Shops Visited")) + ylab('# Unique Users') + xlab('') +
geom_bar(stat="identity", aes(fill=''), width=0.5 ) + scale_fill_manual(values=indoorColor) +
geom_text(aes(y=uniqueUserCount/2, label = paste0(uniqueUserCount, "\n(", avgDuration, " mins/visit)" )), size=text_size-4) +
theme(axis.text=element_text(size=10), axis.title=element_text(size=axis_title_size,face="bold"), plot.title=element_text(size=plot_size, face="bold", color=indoorColor)) +
theme(axis.text.x = element_text(size=10,angle=30)) + theme(legend.position="none")
print(ptopShops)
pshopScatter <- ggplot(data=shopVisits[1:20,], aes(x = numVisits, y = avgDuration)) +
ggtitle("Top 20 Shop Statistics: Avg. Duration VS. # of Visits") + ylab('Avg. Visit Duration (mins)') + xlab('# of Visits') +
geom_point(aes(color=''), size=5) + scale_color_brewer(palette="Set1") + geom_text(aes(y=avgDuration+1, label = paste0(name), size=text_size-1)) +
theme(axis.text=element_text(size=12), axis.title=element_text(size=axis_title_size,face="bold"), plot.title=element_text(size=plot_size, face="bold"))
print(pshopScatter)
textplot("Top 30 Shops")
grid.newpage()
grid.table(shopVisits[1:30,])
###############################################################
#Weekly View
###############################################################
top10ShopDisplay <- shopReq %>%
filter(sessionLength>=minShopVisitMins & name %in% top10shops) %>%
group_by(name, hour, day_name) %>%
summarize(uniqueSessionID = n_distinct(session_id), mallReqCount = n())
top10ShopDisplay$day_code <- 0
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Monday"] <- 1
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Tuesday"] <- 2
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Wednesday"] <- 3
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Thursday"] <- 4
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Friday"] <- 5
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Saturday"] <- 6
top10ShopDisplay$day_code[top10ShopDisplay$day_name=="Sunday"] <- 7
top10ShopDisplay$day_hour <- paste0(top10ShopDisplay$day_name, "_", top10ShopDisplay$hour)
p10ShopW <- ggplot(data=top10ShopDisplay, aes(x=reorder(day_hour, day_code),y=uniqueSessionID), fill=day_name) +
ggtitle(paste0("Top 10 Brand Visits: Weekly View")) + ylab('# Unique Users') + xlab('day_hour') +
geom_bar(stat="identity", aes(fill=day_name), width=0.5 ) + scale_fill_brewer(palette="Set3") +
geom_text(aes(y=uniqueSessionID, label = uniqueSessionID), size=text_size-4) +
theme(axis.text=element_text(size=10), axis.title=element_text(size=axis_title_size,face="bold"), plot.title=element_text(size=plot_size, face="bold")) +
theme(axis.text.x = element_text(size=10,angle=90)) + facet_grid(name ~ .)
print(p10ShopW)
View(shopVisits)
test <- merge(x=shopVisits[1:30,], y=shopReq, by="name")
View(test)
top30Visitors <- unique(test$session_id)
write.csv(top30Visitors, "top30Visitor.csv")
top30ShopsVisitors <- test %>%
group_by(session_id, name)
View(top30ShopsVisitors)
top30ShopsVisitors <- test %>%
group_by(session_id, name)
summarize(count=n())
top30ShopsVisitors <- test %>%
group_by(session_id, name)
summarize(count=n())
top30ShopsVisitors <- test %>%
group_by(session_id, name) %>%
summarize(count=n())
View(top30ShopsVisitors)
write.csv(top30ShopsVisitors, "top30ShopsVisitors.csv")
